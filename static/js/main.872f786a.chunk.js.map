{"version":3,"sources":["components/App/App.module.scss","components/Nav/Nav.jsx","components/App/App.js","redux/reducers/columns.js","redux/reducers/index.js","redux/action-types.js","redux/store.js","index.js"],"names":["module","exports","Example","props","useState","Navbar","color","light","expand","NavbarBrand","href","keys","App","className","styles","app","Nav","Table","map","key","PhillyList","entry","i","scope","initialState","columns","name","cards","text","updateLocalStore","state","store","set","combineReducers","action","type","payload","nextIndex","currentIndex","card","cardIndex","column","columnIndex","filter","index","nextState","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"yu4iBACAA,EAAOC,QAAU,CAAC,IAAM,mB,qLC6BTC,EAdC,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,6BAKzB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,oC,iBCfFC,EAAO,CAAC,eACd,WACA,cACA,aACA,mBACA,OACA,QACA,MACA,kBACA,UACA,WACA,SACA,QACA,MACA,QACA,UACA,SACA,qBACA,cA2BeC,EAzBH,WACV,OACM,yBAAKC,UAAWC,IAAOC,KACnB,kBAACC,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,+BACE,4BACE,iCACCN,EAAKO,KAAI,SAAAC,GAAG,OAAK,4BAAKA,QAG3B,+BACGC,EAAWF,KAAI,SAACG,EAAOC,GACpB,OAAQ,4BACF,wBAAIC,MAAM,OAAOD,EAAI,GACpBX,EAAKO,KAAI,SAAAC,GAAG,OAAK,4BAAKE,EAAMF,e,+CCzCjDK,EAAe,CACnBC,QAAS,CAAC,CACRC,KAAM,IACNC,MAAO,CAAC,CAAEC,KAAM,SAAW,CAAEA,KAAM,WACnC,CACAF,KAAM,IACNC,MAAO,CAAC,CAAEC,KAAM,SAAW,CAAEA,KAAM,WACnC,CACAF,KAAM,IACNC,MAAO,CAAC,CAAEC,KAAM,SAAW,CAAEA,KAAM,WACnC,CACAF,KAAM,IACNC,MAAO,CAAC,CAAEC,KAAM,SAAW,CAAEA,KAAM,aAKjCC,EAAmB,SAACC,GACxBC,IAAMC,IAAI,QAASF,IAGrBD,EAAiBL,GAEF,ICvBAS,cAAgB,CAAER,QDuBlB,WAAwC,IAA/BK,EAA8B,uDAAtBN,EAAcU,EAAQ,uCACnD,OAAQA,EAAOC,MACb,IE3B8B,sBF2BH,IAAD,EAC4BD,EAAOE,QAApDC,EADiB,EACjBA,UAAWC,EADM,EACNA,aAAcC,EADR,EACQA,KAAMC,EADd,EACcA,UAEjCf,EAAO,YAAOK,EAAML,QAAQP,KAAI,SAACuB,EAAQC,GAC7C,OAAIA,IAAgBJ,EACX,eACFG,EADL,CAEEd,MAAM,YAAKc,EAAOd,MAAMgB,QAAO,SAACJ,EAAMK,GAAP,OAAiBA,IAAUJ,QAK1DE,IAAgBL,EACX,eACFI,EADL,CAEEd,MAAM,GAAD,mBAAMc,EAAOd,OAAb,CAAoBY,MAKtBE,MAGHI,EAAS,eACVf,EADU,CAEbL,YAIF,OADAI,EAAiBgB,GACVA,EAGR,IE5D6B,qBF4DH,IAAD,EACcX,EAAOE,QAA7BM,EADQ,EACfE,MAAoBhB,EADL,EACKA,KACtBiB,EAAS,eACVf,EADU,CAEbL,QAAQ,YAAKK,EAAML,QAAQP,KAAI,SAACuB,EAAQG,GACrC,OAAIA,IAAUF,EACL,eACFD,EADL,CAEEd,MAAM,GAAD,mBAAMc,EAAOd,OAAb,CAAoB,CAACC,YAIvBa,QAKZ,OAFAZ,EAAiBgB,GAEVA,EAeT,QACC,OAAOf,MG1FEgB,cAAYC,G,MCQ3BC,IAASC,OACT,kBAAC,IAAD,CAAUlB,MAAOA,GACb,kBAAC,EAAD,OAEJmB,SAASC,eAAe,W","file":"static/js/main.872f786a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3BT4Y\"};","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\n\nconst Example = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">Minority Business Owners List</NavbarBrand>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Example;","import React from \"react\"\n\nimport PhillyList from 'constants/lists/philly'\nimport {Table} from 'reactstrap'\n\nimport Nav from 'components/Nav/Nav'\n\nimport styles from './App.module.scss'\n\nconst keys = [\"Company Name\",\n\"DBA Name\",\n\"Owner First\",\n\"Owner Last\",\n\"Physical Address\",\n\"City\",\n\"State\",\n\"Zip\",\n\"Mailing Address\",\n\"City__1\",\n\"State__1\",\n\"Zip__1\",\n\"Phone\",\n\"Fax\",\n\"Email\",\n\"Website\",\n\"Agency\",\n\"Certification Type\",\n\"Capability\",]\n\nconst App = () => {\n  return (\n        <div className={styles.app}>\n            <Nav />\n            <Table>\n              <thead>\n                <tr>\n                  <th>#</th>\n                  {keys.map(key => (<th>{key}</th>))}\n                </tr>\n              </thead>\n              <tbody>\n                {PhillyList.map((entry, i) => {\n                    return (<tr>\n                          <th scope=\"row\">{i + 1}</th>\n                          {keys.map(key => (<td>{entry[key]}</td>))}\n                        </tr>)\n                })}\n              </tbody>\n            </Table>\n\n        </div>\n    );\n}\n\nexport default App","import { ADD_CARD_TO_COLUMN, MOVE_CARD_TO_COLUMN } from \"redux/action-types\";\nimport store from 'store'\n\nconst initialState = {\n  columns: [{\n    name: 'A',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  },{\n    name: 'B',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  },{\n    name: 'C',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  },{\n    name: 'D',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  }],\n};\n\n\nconst updateLocalStore = (state) => {\n  store.set('board', state)\n}\n\nupdateLocalStore(initialState)\n\nexport default function(state = initialState, action) {\n   switch (action.type) {\n     case MOVE_CARD_TO_COLUMN: {\n      const { nextIndex, currentIndex, card, cardIndex } = action.payload\n      // first, remove from og column\n      const columns = [...state.columns.map((column, columnIndex) => {\n        if (columnIndex === currentIndex) {\n          return {\n            ...column,\n            cards: [...column.cards.filter((card, index) => index !== cardIndex)]\n          }\n        }\n\n      // next, add to column at `columnIndex`\n        if (columnIndex === nextIndex) {\n          return {\n            ...column,\n            cards: [...column.cards, card]\n          }\n        }\n\n        // otherwise just return same column\n        return column\n      })]\n\n      const nextState = {\n        ...state,\n        columns,\n      }\n\n      updateLocalStore(nextState)\n      return nextState\n     }\n\n     case ADD_CARD_TO_COLUMN: {\n       const { index: columnIndex, text } = action.payload\n       const nextState = {\n         ...state,\n         columns: [...state.columns.map((column, index) => {\n            if (index === columnIndex) {\n              return {\n                ...column,\n                cards: [...column.cards, {text}]\n              }\n            }\n\n            return column\n         })],\n       }\n       updateLocalStore(nextState)\n\n       return nextState\n     }\n  //   case TOGGLE_TODO: {\n  //     const { id } = action.payload;\n  //     return {\n  //       ...state,\n  //       byIds: {\n  //         ...state.byIds,\n  //         [id]: {\n  //           ...state.byIds[id],\n  //           completed: !state.byIds[id].completed\n  //         }\n  //       }\n  //     };\n  //   }\n     default:\n      return state;\n   }\n}\n","import { combineReducers } from 'redux'\nimport columns from 'redux/reducers/columns'\n\nexport default combineReducers({ columns });\n","export const ADD_CARD_TO_COLUMN = \"ADD_CARD_TO_COLUMN\";\nexport const MOVE_CARD_TO_COLUMN = \"MOVE_CARD_TO_COLUMN\";","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from 'components/App/App';\n\nimport { Provider } from 'react-redux'\nimport store from 'redux/store'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n<Provider store={store}>\n    <TodoApp />\n  </Provider>,\ndocument.getElementById('root'));\n"],"sourceRoot":""}