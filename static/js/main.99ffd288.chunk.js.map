{"version":3,"sources":["components/Core/App/App.module.scss","components/Core/App/App.js","components/Core/Nav/Nav.jsx","components/Core/DataTable/DataTable.jsx","redux/reducers/columns.js","redux/reducers/index.js","redux/action-types.js","redux/store.js","index.js"],"names":["module","exports","keys","App","className","styles","app","list","PhillyList","listColumns","map","key","accessor","Header","Nav","props","useState","Navbar","color","light","expand","NavbarBrand","href","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","onChange","e","target","undefined","placeholder","style","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","React","useMemo","Set","forEach","row","add","values","option","i","fuzzyTextFilterFn","rows","matchSorter","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","colSpan","textAlign","getRowProps","cells","cell","getCellProps","autoRemove","val","DataTable","initialState","name","cards","updateLocalStore","store","set","combineReducers","action","type","payload","nextIndex","currentIndex","card","cardIndex","columnIndex","index","nextState","createStore","rootReducer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.99ffd288.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3nBBF\"};","import React from 'react'\n\nimport PhillyList from 'constants/lists/philly'\nimport { Table } from 'reactstrap'\n\nimport { Nav, DataTable } from 'components/Core'\n\nimport styles from './App.module.scss'\n\nconst keys = [\n    'Company Name',\n    'DBA Name',\n    'Owner First',\n    'Owner Last',\n    'Physical Address',\n    'City',\n    'State',\n    'Zip',\n    'Mailing Address',\n    'City__1',\n    'State__1',\n    'Zip__1',\n    'Phone',\n    'Fax',\n    'Email',\n    'Website',\n    'Agency',\n    'Certification Type',\n    'Capability',\n]\n\nconst App = () => {\n    return (\n        <div className={styles.app}>\n            <Nav />\n            <DataTable\n                list={PhillyList}\n                listColumns={keys.map((key) => ({ accessor: key, Header: key }))}\n            />\n            {false && (\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            {keys.map((key) => (\n                                <th>{key}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {PhillyList.map((entry, i) => {\n                            return (\n                                <tr>\n                                    <th scope=\"row\">{i + 1}</th>\n                                    {keys.map((key) => (\n                                        <td>{entry[key]}</td>\n                                    ))}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </Table>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","import React, { useState } from 'react'\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    // Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    NavbarText,\n} from 'reactstrap'\n\nconst Nav = (props) => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const toggle = () => setIsOpen(!isOpen)\n\n    return (\n        <div>\n            <Navbar color=\"light\" light expand=\"md\">\n                <NavbarBrand href=\"/\">Minority Business Owners List</NavbarBrand>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default Nav\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { useTable, useFilters, useGlobalFilter } from 'react-table'\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter'\n\n// Define a default UI for filtering\nfunction GlobalFilter({ preGlobalFilteredRows, globalFilter, setGlobalFilter }) {\n    const count = preGlobalFilteredRows.length\n\n    return (\n        <span>\n            Search:{' '}\n            <input\n                value={globalFilter || ''}\n                onChange={(e) => {\n                    setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n                }}\n                placeholder={`${count} records found...`}\n                style={{\n                    fontSize: '1.1rem',\n                    border: '0',\n                }}\n            />\n        </span>\n    )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({ column: { filterValue, preFilteredRows, setFilter } }) {\n    const count = preFilteredRows.length\n\n    return (\n        <input\n            value={filterValue || ''}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nfunction SelectColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\n    // Calculate the options for filtering\n    // using the preFilteredRows\n    const options = React.useMemo(() => {\n        const options = new Set()\n        preFilteredRows.forEach((row) => {\n            options.add(row.values[id])\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    // Render a multi-select box\n    return (\n        <select\n            value={filterValue}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined)\n            }}\n        >\n            <option value=\"\">All</option>\n            {options.map((option, i) => (\n                <option key={i} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nfunction SliderColumnFilter({ column: { filterValue, setFilter, preFilteredRows, id } }) {\n    // Calculate the min and max\n    // using the preFilteredRows\n\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach((row) => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <>\n            <input\n                type=\"range\"\n                min={min}\n                max={max}\n                value={filterValue || min}\n                onChange={(e) => {\n                    setFilter(parseInt(e.target.value, 10))\n                }}\n            />\n            <button onClick={() => setFilter(undefined)}>Off</button>\n        </>\n    )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nfunction NumberRangeColumnFilter({\n    column: { filterValue = [], preFilteredRows, setFilter, id },\n}) {\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach((row) => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n            }}\n        >\n            <input\n                value={filterValue[0] || ''}\n                type=\"number\"\n                onChange={(e) => {\n                    const val = e.target.value\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n                }}\n                placeholder={`Min (${min})`}\n                style={{\n                    width: '70px',\n                    marginRight: '0.5rem',\n                }}\n            />\n            to\n            <input\n                value={filterValue[1] || ''}\n                type=\"number\"\n                onChange={(e) => {\n                    const val = e.target.value\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n                }}\n                placeholder={`Max (${max})`}\n                style={{\n                    width: '70px',\n                    marginLeft: '0.5rem',\n                }}\n            />\n        </div>\n    )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n\n// Our table component\nfunction Table({ columns, data }) {\n    const filterTypes = React.useMemo(\n        () => ({\n            // Add a new fuzzyTextFilterFn filter type.\n            fuzzyText: fuzzyTextFilterFn,\n            // Or, override the default text filter to use\n            // \"startWith\"\n            text: (rows, id, filterValue) => {\n                return rows.filter((row) => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                              .toLowerCase()\n                              .startsWith(String(filterValue).toLowerCase())\n                        : true\n                })\n            },\n        }),\n        [],\n    )\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        [],\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        visibleColumns,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn, // Be sure to pass the defaultColumn option\n            filterTypes,\n        },\n        useFilters, // useFilters!\n        useGlobalFilter, // useGlobalFilter!\n    )\n\n    return (\n        <>\n            <table {...getTableProps()}>\n                <thead>\n                    {headerGroups.map((headerGroup) => (\n                        <tr {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column) => (\n                                <th {...column.getHeaderProps()}>\n                                    {column.render('Header')}\n                                    {/* Render the columns filter UI */}\n                                    <div>\n                                        {column.canFilter\n                                            ? column.render('Filter')\n                                            : null}\n                                    </div>\n                                </th>\n                            ))}\n                        </tr>\n                    ))}\n\n                    <tr>\n                        <th\n                            colSpan={visibleColumns.length}\n                            style={{\n                                textAlign: 'left',\n                            }}\n                        >\n                            <GlobalFilter\n                                preGlobalFilteredRows={preGlobalFilteredRows}\n                                globalFilter={state.globalFilter}\n                                setGlobalFilter={setGlobalFilter}\n                            />\n                        </th>\n                    </tr>\n                </thead>\n\n                <tbody {...getTableBodyProps()}>\n                    {rows.map((row, i) => {\n                        prepareRow(row)\n                        return (\n                            <tr {...row.getRowProps()}>\n                                {row.cells.map((cell) => {\n                                    return (\n                                        <td {...cell.getCellProps()}>\n                                            {cell.render('Cell')}\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n\n            <br />\n        </>\n    )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n    return rows.filter((row) => {\n        const rowValue = row.values[id]\n        return rowValue >= filterValue\n    })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== 'number'\n\nfunction DataTable({ listColumns, list }) {\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Name',\n                columns: [\n                    {\n                        Header: 'Company Name',\n                        accessor: 'Company Name',\n                        filter: 'fuzzyText',\n                    },\n                    {\n                        Header: 'DBA Name',\n                        accessor: 'DBA Name',\n                    },\n                    {\n                        Header: 'Owner First',\n                        accessor: 'Owner First',\n                    },\n                    {\n                        Header: 'Owner Last',\n                        accessor: 'Owner Last',\n                    },\n                ],\n            },\n            {\n                Header: 'Location',\n                columns: [\n                    {\n                        Header: 'Physical Address',\n                        accessor: 'Physical Address',\n                    },\n                    {\n                        Header: 'City',\n                        accessor: 'City',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                    {\n                        Header: 'State',\n                        accessor: 'State',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                    {\n                        Header: 'Zip',\n                        accessor: 'Zip',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                    {\n                        Header: 'Phone',\n                        accessor: 'Phone',\n                    },\n                ],\n            },\n            {\n                Header: 'Contact Info',\n                columns: [\n                    {\n                        Header: 'Email',\n                        accessor: 'Email',\n                    },\n                    {\n                        Header: 'Website',\n                        accessor: 'website',\n                    },\n                    {\n                        Header: 'Agency',\n                        accessor: 'Agency',\n                    },\n                    {\n                        Header: 'Certification Type',\n                        accessor: 'Certification Type',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                ],\n            },\n        ],\n        [],\n    )\n\n    const data = React.useMemo(() => list)\n\n    return <Table columns={columns} data={data} />\n}\n\nexport default DataTable\n\nDataTable.propTypes = {\n    list: PropTypes.array,\n    listColumns: PropTypes.arrayOf(\n        PropTypes.shape({\n            Header: PropTypes.string.isRequired,\n            accessor: PropTypes.string.isRequired,\n        }),\n    ),\n}\n","import { ADD_CARD_TO_COLUMN, MOVE_CARD_TO_COLUMN } from \"redux/action-types\";\nimport store from 'store'\n\nconst initialState = {\n  columns: [{\n    name: 'A',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  },{\n    name: 'B',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  },{\n    name: 'C',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  },{\n    name: 'D',\n    cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n  }],\n};\n\n\nconst updateLocalStore = (state) => {\n  store.set('board', state)\n}\n\nupdateLocalStore(initialState)\n\nexport default function(state = initialState, action) {\n   switch (action.type) {\n     case MOVE_CARD_TO_COLUMN: {\n      const { nextIndex, currentIndex, card, cardIndex } = action.payload\n      // first, remove from og column\n      const columns = [...state.columns.map((column, columnIndex) => {\n        if (columnIndex === currentIndex) {\n          return {\n            ...column,\n            cards: [...column.cards.filter((card, index) => index !== cardIndex)]\n          }\n        }\n\n      // next, add to column at `columnIndex`\n        if (columnIndex === nextIndex) {\n          return {\n            ...column,\n            cards: [...column.cards, card]\n          }\n        }\n\n        // otherwise just return same column\n        return column\n      })]\n\n      const nextState = {\n        ...state,\n        columns,\n      }\n\n      updateLocalStore(nextState)\n      return nextState\n     }\n\n     case ADD_CARD_TO_COLUMN: {\n       const { index: columnIndex, text } = action.payload\n       const nextState = {\n         ...state,\n         columns: [...state.columns.map((column, index) => {\n            if (index === columnIndex) {\n              return {\n                ...column,\n                cards: [...column.cards, {text}]\n              }\n            }\n\n            return column\n         })],\n       }\n       updateLocalStore(nextState)\n\n       return nextState\n     }\n  //   case TOGGLE_TODO: {\n  //     const { id } = action.payload;\n  //     return {\n  //       ...state,\n  //       byIds: {\n  //         ...state.byIds,\n  //         [id]: {\n  //           ...state.byIds[id],\n  //           completed: !state.byIds[id].completed\n  //         }\n  //       }\n  //     };\n  //   }\n     default:\n      return state;\n   }\n}\n","import { combineReducers } from 'redux'\nimport columns from 'redux/reducers/columns'\n\nexport default combineReducers({ columns });\n","export const ADD_CARD_TO_COLUMN = \"ADD_CARD_TO_COLUMN\";\nexport const MOVE_CARD_TO_COLUMN = \"MOVE_CARD_TO_COLUMN\";","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from 'components/Core'\n\nimport { Provider } from 'react-redux'\nimport store from 'redux/store'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}