{"version":3,"sources":["components/Core/App/App.module.scss","components/Core/Filters/index.js","components/Core/App/App.js","components/Core/Nav/Nav.jsx","components/Core/DataTable/DataTable.jsx","redux/reducers/columns.js","redux/reducers/index.js","redux/action-types.js","redux/store.js","index.js"],"names":["module","exports","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","Row","Col","Input","value","onChange","e","target","undefined","placeholder","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","SelectColumnFilter","id","options","React","useMemo","Set","forEach","row","add","values","map","option","i","key","SliderColumnFilter","min","max","Math","type","parseInt","onClick","NumberRangeColumnFilter","style","display","val","old","width","marginRight","marginLeft","fuzzyTextFilterFn","rows","matchSorter","keys","autoRemove","App","className","styles","app","list","PhillyList","listColumns","accessor","Header","Nav","props","useState","Navbar","NavbarBrand","href","Filters","Table","columns","data","filterTypes","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","useTable","useFilters","useGlobalFilter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","colSpan","getRowProps","cells","cell","getCellProps","DataTable","disableFilters","initialState","name","cards","updateLocalStore","store","set","combineReducers","action","payload","nextIndex","currentIndex","card","cardIndex","columnIndex","index","nextState","createStore","rootReducer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5823a602.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3nBBF\"};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Table as RSTable, Input, Row, Col } from 'reactstrap'\nimport { useTable, useFilters, useGlobalFilter } from 'react-table'\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter'\n\n// Define a default UI for filtering\nexport const GlobalFilter = ({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n}) => {\n    const count = preGlobalFilteredRows.length\n\n    return (\n        <Row>\n            <Col>Search:</Col>\n            <Col>\n                <Input\n                    value={globalFilter || ''}\n                    onChange={(e) => {\n                        setGlobalFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n                    }}\n                    placeholder={`${count} records found...`}\n                />\n            </Col>\n        </Row>\n    )\n}\n\n// Define a default UI for filtering\nexport const DefaultColumnFilter = ({\n    column: { filterValue, preFilteredRows, setFilter },\n}) => {\n    const count = preFilteredRows.length\n\n    return (\n        <Input\n            value={filterValue || ''}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n            }}\n            placeholder={`Search ${count} records...`}\n        />\n    )\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport const SelectColumnFilter = ({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) => {\n    // Calculate the options for filtering\n    // using the preFilteredRows\n    const options = React.useMemo(() => {\n        const options = new Set()\n        preFilteredRows.forEach((row) => {\n            options.add(row.values[id])\n        })\n        return [...options.values()]\n    }, [id, preFilteredRows])\n\n    // Render a multi-select box\n    return (\n        <select\n            value={filterValue}\n            onChange={(e) => {\n                setFilter(e.target.value || undefined)\n            }}\n        >\n            <option value=\"\">All</option>\n            {options.map((option, i) => (\n                <option key={i} value={option}>\n                    {option}\n                </option>\n            ))}\n        </select>\n    )\n}\n\n// This is a custom filter UI that uses a\n// slider to set the filter value between a column's\n// min and max values\nexport const SliderColumnFilter = ({\n    column: { filterValue, setFilter, preFilteredRows, id },\n}) => {\n    // Calculate the min and max\n    // using the preFilteredRows\n\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach((row) => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <>\n            <Input\n                type=\"range\"\n                min={min}\n                max={max}\n                value={filterValue || min}\n                onChange={(e) => {\n                    setFilter(parseInt(e.target.value, 10))\n                }}\n            />\n            <button onClick={() => setFilter(undefined)}>Off</button>\n        </>\n    )\n}\n\n// This is a custom UI for our 'between' or number range\n// filter. It uses two number boxes and filters rows to\n// ones that have values between the two\nexport const NumberRangeColumnFilter = ({\n    column: { filterValue = [], preFilteredRows, setFilter, id },\n}) => {\n    const [min, max] = React.useMemo(() => {\n        let min = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        let max = preFilteredRows.length ? preFilteredRows[0].values[id] : 0\n        preFilteredRows.forEach((row) => {\n            min = Math.min(row.values[id], min)\n            max = Math.max(row.values[id], max)\n        })\n        return [min, max]\n    }, [id, preFilteredRows])\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n            }}\n        >\n            <Input\n                value={filterValue[0] || ''}\n                type=\"number\"\n                onChange={(e) => {\n                    const val = e.target.value\n                    setFilter((old = []) => [val ? parseInt(val, 10) : undefined, old[1]])\n                }}\n                placeholder={`Min (${min})`}\n                style={{\n                    width: '70px',\n                    marginRight: '0.5rem',\n                }}\n            />\n            to\n            <Input\n                value={filterValue[1] || ''}\n                type=\"number\"\n                onChange={(e) => {\n                    const val = e.target.value\n                    setFilter((old = []) => [old[0], val ? parseInt(val, 10) : undefined])\n                }}\n                placeholder={`Max (${max})`}\n                style={{\n                    width: '70px',\n                    marginLeft: '0.5rem',\n                }}\n            />\n        </div>\n    )\n}\n\nexport const fuzzyTextFilterFn = (rows, id, filterValue) => {\n    return matchSorter(rows, filterValue, { keys: [(row) => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = (val) => !val\n","import React from 'react'\n\nimport PhillyList from 'constants/lists/philly'\nimport { Table } from 'reactstrap'\n\nimport { Nav, DataTable } from 'components/Core'\n\nimport styles from './App.module.scss'\n\nconst keys = [\n    'Company Name',\n    'DBA Name',\n    'Owner First',\n    'Owner Last',\n    'Physical Address',\n    'City',\n    'State',\n    'Zip',\n    'Mailing Address',\n    'City__1',\n    'State__1',\n    'Zip__1',\n    'Phone',\n    'Fax',\n    'Email',\n    'Website',\n    'Agency',\n    'Certification Type',\n    'Capability',\n]\n\nconst App = () => {\n    return (\n        <div className={styles.app}>\n            <Nav />\n            <DataTable\n                list={PhillyList}\n                listColumns={keys.map((key) => ({ accessor: key, Header: key }))}\n            />\n            {false && (\n                <Table>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            {keys.map((key) => (\n                                <th>{key}</th>\n                            ))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {PhillyList.map((entry, i) => {\n                            return (\n                                <tr>\n                                    <th scope=\"row\">{i + 1}</th>\n                                    {keys.map((key) => (\n                                        <td>{entry[key]}</td>\n                                    ))}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </Table>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","import React, { useState } from 'react'\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav as RSNav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    NavbarText,\n} from 'reactstrap'\n\nconst Nav = (props) => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const toggle = () => setIsOpen(!isOpen)\n\n    return (\n        <RSNav>\n            <Navbar>\n                <NavbarBrand href=\"/\">Minority Business Owners List</NavbarBrand>\n            </Navbar>\n        </RSNav>\n    )\n}\n\nexport default Nav\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Table as RSTable, Input, Row, Col } from 'reactstrap'\nimport { useTable, useFilters, useGlobalFilter } from 'react-table'\nimport { Filters } from 'components/Core'\n\nconst {\n    GlobalFilter,\n    DefaultColumnFilter,\n    SelectColumnFilter,\n    SliderColumnFilter,\n    NumberRangeColumnFilter,\n    fuzzyTextFilterFn,\n} = Filters\n\n// Our table component\nfunction Table({ columns, data }) {\n    const filterTypes = React.useMemo(\n        () => ({\n            // Add a new fuzzyTextFilterFn filter type.\n            fuzzyText: fuzzyTextFilterFn,\n            // Or, override the default text filter to use\n            // \"startWith\"\n            text: (rows, id, filterValue) => {\n                return rows.filter((row) => {\n                    const rowValue = row.values[id]\n                    return rowValue !== undefined\n                        ? String(rowValue)\n                              .toLowerCase()\n                              .startsWith(String(filterValue).toLowerCase())\n                        : true\n                })\n            },\n        }),\n        [],\n    )\n\n    const defaultColumn = React.useMemo(\n        () => ({\n            // Let's set up our default Filter UI\n            Filter: DefaultColumnFilter,\n        }),\n        [],\n    )\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        state,\n        visibleColumns,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n    } = useTable(\n        {\n            columns,\n            data,\n            defaultColumn, // Be sure to pass the defaultColumn option\n            filterTypes,\n        },\n        useFilters, // useFilters!\n        useGlobalFilter, // useGlobalFilter!\n    )\n\n    return (\n        <RSTable {...getTableProps()}>\n            <thead>\n                {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map((column) => (\n                            <th {...column.getHeaderProps()}>\n                                {column.render('Header')}\n                                {/* Render the columns filter UI */}\n                                <div>\n                                    {column.canFilter ? column.render('Filter') : null}\n                                </div>\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n\n                <tr>\n                    <th colSpan={visibleColumns.length}>\n                        <GlobalFilter\n                            preGlobalFilteredRows={preGlobalFilteredRows}\n                            globalFilter={state.globalFilter}\n                            setGlobalFilter={setGlobalFilter}\n                        />\n                    </th>\n                </tr>\n            </thead>\n\n            <tbody {...getTableBodyProps()}>\n                {rows.map((row, i) => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map((cell) => {\n                                return (\n                                    <td {...cell.getCellProps()}>\n                                        {cell.render('Cell')}\n                                    </td>\n                                )\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </RSTable>\n    )\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n    return rows.filter((row) => {\n        const rowValue = row.values[id]\n        return rowValue >= filterValue\n    })\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== 'number'\n\nfunction DataTable({ listColumns, list }) {\n    const columns = React.useMemo(\n        () => [\n            {\n                Header: 'Name',\n                columns: [\n                    {\n                        Header: 'Company Name',\n                        accessor: 'Company Name',\n                        disableFilters: true,\n                    },\n                    {\n                        Header: 'DBA Name',\n                        accessor: 'DBA Name',\n                        disableFilters: true,\n                    },\n                    {\n                        Header: 'Owner First',\n                        accessor: 'Owner First',\n                        disableFilters: true,\n                    },\n                    {\n                        Header: 'Owner Last',\n                        accessor: 'Owner Last',\n                        disableFilters: true,\n                    },\n                ],\n            },\n            {\n                Header: 'Location',\n                columns: [\n                    {\n                        Header: 'Physical Address',\n                        accessor: 'Physical Address',\n                        disableFilters: true,\n                    },\n                    {\n                        Header: 'City',\n                        accessor: 'City',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                    {\n                        Header: 'State',\n                        accessor: 'State',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                    {\n                        Header: 'Zip',\n                        accessor: 'Zip',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                    {\n                        Header: 'Phone',\n                        accessor: 'Phone',\n                        disableFilters: true,\n                    },\n                ],\n            },\n            {\n                Header: 'Contact Info',\n                columns: [\n                    {\n                        Header: 'Email',\n                        accessor: 'Email',\n                        disableFilters: true,\n                    },\n                    {\n                        Header: 'Website',\n                        accessor: 'Website',\n                        disableFilters: true,\n                    },\n                    {\n                        Header: 'Agency',\n                        accessor: 'Agency',\n                        disableFilters: true,\n                    },\n                    {\n                        Header: 'Certification Type',\n                        accessor: 'Certification Type',\n                        Filter: SelectColumnFilter,\n                        filter: 'includes',\n                    },\n                ],\n            },\n        ],\n        [],\n    )\n\n    const data = React.useMemo(() => list)\n\n    return <Table columns={columns} data={data} />\n}\n\nexport default DataTable\n\nDataTable.propTypes = {\n    list: PropTypes.array,\n    // listColumns: PropTypes.arrayOf(\n    //     PropTypes.shape({\n    //         Header: PropTypes.string.isRequired,\n    //         accessor: PropTypes.string.isRequired,\n    //     }),\n    // ),\n}\n","import { ADD_CARD_TO_COLUMN, MOVE_CARD_TO_COLUMN } from 'redux/action-types'\nimport store from 'store'\n\nconst initialState = {\n    columns: [\n        {\n            name: 'A',\n            cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n        },\n        {\n            name: 'B',\n            cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n        },\n        {\n            name: 'C',\n            cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n        },\n        {\n            name: 'D',\n            cards: [{ text: 'TODO1' }, { text: 'TODO2' }],\n        },\n    ],\n}\n\nconst updateLocalStore = (state) => {\n    store.set('board', state)\n}\n\nupdateLocalStore(initialState)\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case MOVE_CARD_TO_COLUMN: {\n            const { nextIndex, currentIndex, card, cardIndex } = action.payload\n            // first, remove from og column\n            const columns = [\n                ...state.columns.map((column, columnIndex) => {\n                    if (columnIndex === currentIndex) {\n                        return {\n                            ...column,\n                            cards: [\n                                ...column.cards.filter(\n                                    (card, index) => index !== cardIndex,\n                                ),\n                            ],\n                        }\n                    }\n\n                    // next, add to column at `columnIndex`\n                    if (columnIndex === nextIndex) {\n                        return {\n                            ...column,\n                            cards: [...column.cards, card],\n                        }\n                    }\n\n                    // otherwise just return same column\n                    return column\n                }),\n            ]\n\n            const nextState = {\n                ...state,\n                columns,\n            }\n\n            updateLocalStore(nextState)\n            return nextState\n        }\n\n        case ADD_CARD_TO_COLUMN: {\n            const { index: columnIndex, text } = action.payload\n            const nextState = {\n                ...state,\n                columns: [\n                    ...state.columns.map((column, index) => {\n                        if (index === columnIndex) {\n                            return {\n                                ...column,\n                                cards: [...column.cards, { text }],\n                            }\n                        }\n\n                        return column\n                    }),\n                ],\n            }\n            updateLocalStore(nextState)\n\n            return nextState\n        }\n        //   case TOGGLE_TODO: {\n        //     const { id } = action.payload;\n        //     return {\n        //       ...state,\n        //       byIds: {\n        //         ...state.byIds,\n        //         [id]: {\n        //           ...state.byIds[id],\n        //           completed: !state.byIds[id].completed\n        //         }\n        //       }\n        //     };\n        //   }\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\nimport columns from 'redux/reducers/columns'\n\nexport default combineReducers({ columns })\n","export const ADD_CARD_TO_COLUMN = 'ADD_CARD_TO_COLUMN'\nexport const MOVE_CARD_TO_COLUMN = 'MOVE_CARD_TO_COLUMN'\n","import { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nexport default createStore(rootReducer)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'typeface-roboto'\nimport './index.css'\nimport { App } from 'components/Core'\n\nimport { Provider } from 'react-redux'\nimport store from 'redux/store'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}